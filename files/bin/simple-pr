#! /usr/bin/env python3
import argparse
import subprocess
import sys
import os
import re


def sys_call(cmd, return_code=False):
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    out, err = p.communicate()
    if out is not None:
        out = out.decode('utf-8')
    if err is not None:
        err = err.decode('utf-8')
    returncode = p.returncode
    if return_code is True:
        return returncode
    if returncode != 0:
        sys.stderr.write(
            'ERROR: got {} when running {}\n'.format(returncode, cmd)
        )
        if out is not None:
            sys.stdout.write('{}'.format(out))
        if err is not None:
            sys.stderr.write('{}'.format(err))
        sys.exit(returncode)
    return out.strip('\n')


def git_checkout(branch_name):
    sys_call(['git', 'checkout', '-b', branch_name])


def git_add():
    sys_call(['git', 'add', '.'])


def git_commit(pr_name):
    sys_call(['git', 'commit', '-m', pr_name])


def git_push(branch_name):
    sys_call(['git', 'push', 'origin', branch_name])


def git_pull_request(pr_name):
    hub_cmd = ['gh', 'pr', 'create', '-w']
    return sys_call(hub_cmd)


def git_origin_url():
    response = sys_call(['git', 'config', '--get', 'remote.origin.url'])
    if response.split('.')[-1] == 'git':
        uri = re.findall('@(.*?).git', response)[0].replace(':', '/')
        response = 'https://{}'.format(uri)
    return response


def ask_for_git_diff():
    while True:
        res = input("Do you want to see the diff of your PR? [Y/n]  ")
        if res.strip() == '' or res.strip().lower() == 'y':
            os.system('git difftool --tool vimdiff --cached')
            break
        elif res.strip().lower() == 'n':
            break


def git_flow(pr_name, branch_name, diff=False, no_pr=False):
    git_checkout(branch_name)
    git_add()

    if diff:
        ask_for_git_diff()

    git_commit(pr_name)
    git_push(branch_name)
    if no_pr:
        return git_origin_url()
    git_pull_request(pr_name)


def main(args):
    pr_name = args.name.strip(' \'"')
    branch_name = 'js/{}'.format(pr_name.replace(' ', '_'))
    pr_link = git_flow(pr_name, branch_name, args.diff, args.no_pr)


if __name__ == "__main__":
    home_dir = os.environ['HOME']
    parser = argparse.ArgumentParser(description='create a simple GitHub PR')
    parser.add_argument('name', help='simple PR name')
    parser.add_argument('--diff', action='store_true',
                        help='do not ask for diff')
    parser.add_argument('--no_pr', action='store_true',
                        help='do not create the PR just push the branch')
    args = parser.parse_args()

    main(args)
